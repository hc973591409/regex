正则表达式概述

re模块操作
在Python中需要通过正则表达式对字符串进⾏匹配的时候，可以使⽤⼀个模
块，名字为re

# 导⼊re模块
    import re
# 使⽤match⽅法进⾏匹配操作
    result = re.match(正则表达式,要匹配的字符串)
# 如果上⼀步匹配到数据的话，可以使⽤group⽅法来提取数据
    result.group()

re.match是⽤来进⾏正则匹配检查的⽅法，若字符串匹配正则
表达式，则match⽅法返回匹配对象（Match Object），否则
返回None（注意不是空字符串""）。
匹配对象Macth Object具有group⽅法，⽤来返回字符串的匹
配部分。

2. re模块示例(匹配以itcast开头的语句)
    #coding=utf-8
    import re
    result = re.match("itcast","itcast.cn")
re模块操作
    result.group()
运⾏结果为：
    itcast

表示字符
在上⼀⼩节中，了解到通过re模块能够完成使⽤正则表达式来匹配字符串
本⼩节，将要讲解正则表达式的单字符匹配

字符 功能
. 匹配任意1个字符（除了\n）
[ ] 匹配[ ]中列举的字符
\d 匹配数字，即0-9
\D 匹配⾮数字，即不是数字
\s 匹配空⽩，即 空格，tab键
\S 匹配⾮空⽩
\w 匹配单词字符，即a-z、A-Z、0-9、_
\W 匹配⾮单词字符

    import re
    ret = re.match(".","a")
    ret.group()
    >> a
    ret = re.match(".","b") 
    ret.group()
    >> b
    ret = re.match(".","M")
    ret.group()
    >> M 

    import re
# 如果hello的⾸字符⼩写，那么正则表达式需要⼩写的h
    ret = re.match("h","hello Python")
    ret.group()
    >> h 
# 如果hello的⾸字符⼤写，那么正则表达式需要⼤写的H
    ret = re.match("H","Hello Python")
    ret.group()
    >> H 
# ⼤⼩写h都可以的情况
    ret = re.match("[hH]","hello Python")
    ret.group()
    >> h 
    ret = re.match("[hH]","Hello Python")
    ret.group()
    >> H 
# 匹配0到9第⼀种写法
    ret = re.match("[0123456789]","7Hello Python")
    ret.group()
    >> 7
# 匹配0到9第⼆种写法
    ret = re.match("[0-9]","7Hello Python")
    ret.group()
    >> 7

    import re
# 普通的匹配⽅式
    ret = re.match("嫦娥1号","嫦娥1号发射成功")
    print ret.group()
    >> "嫦娥1号"
    ret = re.match("嫦娥2号","嫦娥2号发射成功")
    print ret.group()
     >> "嫦娥2号"
    ret = re.match("嫦娥3号","嫦娥3号发射成功")
    print ret.group()
     >> "嫦娥3号"
    # 使⽤\d进⾏匹配
    ret = re.match("嫦娥\d号","嫦娥1号发射成功")
    print ret.group()
     >> "嫦娥1号"
    ret = re.match("嫦娥\d号","嫦娥2号发射成功")
    print ret.group()
     >> "嫦娥2号"
    ret = re.match("嫦娥\d号","嫦娥3号发射成功")
    print ret.group()
     >> "嫦娥2号"


原生字符串
import re
def r_string():
    mm = "c:\\a\\b\\c"
    print(mm)
    # c:\a\b\c
    m = re.match("c:\\\\", mm)
    # 非原始字符串，所以匹配的时候，单斜杠要处理成双斜杠
    print(m.group())
    # c:\
    # 使用原始字符串，只需要在匹配规则前面加r就可以
    r_m = re.match(r"c:\\", mm)
    print(r_m.group())

# Python中字符串前⾯加上 r 表示原⽣字符串 ，
>>c:\a\b\c
>>c:\
>>c:\
def main():
    r_string()

if __name__ == '__main__':
    main()

表示数量
匹配多个字符的相关格式
字符 功能
    * 匹配前⼀个字符出现0次或者⽆限次，即可有可⽆
    + 匹配前⼀个字符出现1次或者⽆限次，即⾄少有1次
    ? 匹配前⼀个字符出现1次或者0次，即要么有1次，要么没有
    {m} 匹配前⼀个字符出现m次
    {m,} 匹配前⼀个字符⾄少出现m次
    {m,n} 匹配前⼀个字符出现从m到n次


表示边界
字符 功能
    ^ 匹配字符串开头
    $ 匹配字符串结尾
    \b 匹配⼀个单词的边界
    \B 匹配⾮单词边界

匹配分组
    | 匹配左右任意⼀个表达式
    (ab) 将括号中字符作为⼀个分组
    \num 引⽤分组num匹配到的字符串
    (?P<name>) 分组起别名
    (?P=name) 引⽤别名为name分组匹配到的字符串





